crystal_doc_search_index_callback({"repository_name":"lucky_router","body":"# LuckyRouter\n\n[![API Documentation Website](https://img.shields.io/website?down_color=red&down_message=Offline&label=API%20Documentation&up_message=Online&url=https%3A%2F%2Fluckyframework.github.io%2Flucky_router%2F)](https://luckyframework.github.io/lucky_router)\n\nA library for routing HTTP request with Crystal\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  lucky_router:\n    github: luckyframework/lucky_router\n```\n\n## Usage\n\n```crystal\nrequire \"lucky_router\"\n\nrouter = LuckyRouter::Matcher(Symbol).new\n\nrouter.add(\"get\", \"/users\", :index)\nrouter.add(\"delete\", \"/users/:id\", :delete)\n\nrouter.match(\"get\", \"/users\").payload # :index\nrouter.match(\"get\", \"/users\").params # {} of String => String\nrouter.match(\"delete\", \"/users/1\").payload # :delete\nrouter.match(\"delete\", \"/users/1\").params # {\"id\" => \"1\"}\nrouter.match(\"get\", \"/missing_route\").payload # nil\n```\n\n## Contributing\n\n1. Fork it ( https://github.com/luckyframework/lucky_router/fork )\n2. Create your feature branch (git checkout -b my-new-feature)\n3. Make your changes\n4. Run `./bin/test` to run the specs, build shards, and check formatting\n5. Commit your changes (git commit -am 'Add some feature')\n6. Push to the branch (git push origin my-new-feature)\n7. Create a new Pull Request\n\n## Contributors\n\n- [paulcsmith](https://github.com/paulcsmith) Paul Smith - creator, maintainer\n","program":{"html_id":"lucky_router/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"lucky_router","program":true,"enum":false,"alias":false,"const":false,"types":[{"html_id":"lucky_router/LuckerRouter","path":"LuckerRouter.html","kind":"module","full_name":"LuckerRouter","name":"LuckerRouter","abstract":false,"locations":[{"filename":"src/lucky_router/path_reader.cr","line_number":20,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_reader.cr#L20"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"types":[{"html_id":"lucky_router/LuckerRouter/PathReader","path":"LuckerRouter/PathReader.html","kind":"struct","full_name":"LuckerRouter::PathReader","name":"PathReader","abstract":false,"superclass":{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"lucky_router/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"lucky_router/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/path_reader.cr","line_number":20,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_reader.cr#L20"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"lucky_router/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"}],"namespace":{"html_id":"lucky_router/LuckerRouter","kind":"module","full_name":"LuckerRouter","name":"LuckerRouter"},"doc":"A PathReader parses a URI path into segments.\n\nIt can be used to read a String representing a full path into the individual\nsegments it contains.\n\n```\npath = \"/foo/bar/baz\"\nPathReader.new(path).to_a => [\"\", \"foo\", \"bar\", \"baz\"]\n```\n\nPercent-encoded characters are automatically decoded following segmentation\n\n```\npath = \"/user/foo%40example.com/details\"\nPathReader.new(path).to_a => [\"\", \"user\", \"foo@example.com\", \"details\"]\n```","summary":"<p>A PathReader parses a URI path into segments.</p>","constructors":[{"html_id":"new(path:String)-class-method","name":"new","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String)","args_html":"(path : String)","location":{"filename":"src/lucky_router/path_reader.cr","line_number":23,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_reader.cr#L23"},"def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"each(&)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"location":{"filename":"src/lucky_router/path_reader.cr","line_number":26,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_reader.cr#L26"},"def":{"name":"each","yields":1,"block_arity":1,"visibility":"Public","body":"each_segment do |offset, length, decode|\n  segment = String.new(@path.to_unsafe + offset, length)\n  if decode\n    yield URI.decode(segment)\n  else\n    yield segment\n  end\nend"},"external_var":false}]}]},{"html_id":"lucky_router/LuckyRouter","path":"LuckyRouter.html","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter","abstract":false,"locations":[{"filename":"src/lucky_router.cr","line_number":3,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router.cr#L3"},{"filename":"src/lucky_router/errors.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L1"},{"filename":"src/lucky_router/version.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/version.cr#L1"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"{{ (`shards version \\\"/home/runner/work/lucky_router/lucky_router/src/lucky_router\\\"`).chomp.stringify }}","doc":"The current LuckyRouter version is defined in `shard.yml`","summary":"<p>The current LuckyRouter version is defined in <code>shard.yml</code></p>"}],"types":[{"html_id":"lucky_router/LuckyRouter/DuplicateRouteError","path":"LuckyRouter/DuplicateRouteError.html","kind":"class","full_name":"LuckyRouter::DuplicateRouteError","name":"DuplicateRouteError","abstract":false,"superclass":{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},"ancestors":[{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},{"html_id":"lucky_router/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/errors.cr","line_number":14,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L14"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"constructors":[{"html_id":"new(method,new_path,duplicated_path)-class-method","name":"new","abstract":false,"args":[{"name":"method","external_name":"method","restriction":""},{"name":"new_path","external_name":"new_path","restriction":""},{"name":"duplicated_path","external_name":"duplicated_path","restriction":""}],"args_string":"(method, new_path, duplicated_path)","args_html":"(method, new_path, duplicated_path)","location":{"filename":"src/lucky_router/errors.cr","line_number":15,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L15"},"def":{"name":"new","args":[{"name":"method","external_name":"method","restriction":""},{"name":"new_path","external_name":"new_path","restriction":""},{"name":"duplicated_path","external_name":"duplicated_path","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(method, new_path, duplicated_path)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/Fragment","path":"LuckyRouter/Fragment.html","kind":"class","full_name":"LuckyRouter::Fragment(T)","name":"Fragment","abstract":false,"superclass":{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/fragment.cr","line_number":40,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L40"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"doc":"A fragment represents possible combinations for a part of the path. The first/top\nfragment represents the first \"part\" of a path.\n\nThe fragment contains the possible static parts or a single dynamic part\nEach static part or dynamic part has another fragment, that represents the\nnext set of fragments that could match. This is a bit confusing so let's dive\ninto an example:\n\n * `/users/foo`\n * `/users/:id`\n * `/posts/foo`\n\nThe Fragment would represent the possible combinations for the first part\n\n```\n# 'nil' because there is no route with a dynamic part in the first slot\nfragment.dynamic_part # nil\n\n# This returns a Hash whose keys are the possible values, and a value for the\n*next* Fragment\nfragment.static_parts\n\n# Would return:\n{\"users\" => Fragment, \"posts\" => Fragment}\n\n# The Fragment in the 'users' key would have:\n\n# Fragment.new(PathPart(\":id\"))\nfragment.dynamic_part\n\n# Static parts\nfragment.static_parts\n{\"foo\" => Fragment}\n```\n\n## Gotcha\n\nThe last fragment of a path is \"empty\". It does not have static parts or\ndynamic parts","summary":"<p>A fragment represents possible combinations for a part of the path.</p>","constructors":[{"html_id":"new(path_part:LuckyRouter::PathPart)-class-method","name":"new","abstract":false,"args":[{"name":"path_part","external_name":"path_part","restriction":"::LuckyRouter::PathPart"}],"args_string":"(path_part : LuckyRouter::PathPart)","args_html":"(path_part : <a href=\"../LuckyRouter/PathPart.html\">LuckyRouter::PathPart</a>)","location":{"filename":"src/lucky_router/fragment.cr","line_number":50,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L50"},"def":{"name":"new","args":[{"name":"path_part","external_name":"path_part","restriction":"::LuckyRouter::PathPart"}],"visibility":"Public","body":"_ = Fragment(T).allocate\n_.initialize(path_part)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"add_part(path_part:PathPart):Fragment(T)-instance-method","name":"add_part","abstract":false,"args":[{"name":"path_part","external_name":"path_part","restriction":"PathPart"}],"args_string":"(path_part : PathPart) : Fragment(T)","args_html":"(path_part : <a href=\"../LuckyRouter/PathPart.html\">PathPart</a>) : <a href=\"../LuckyRouter/Fragment.html\">Fragment</a>(T)","location":{"filename":"src/lucky_router/fragment.cr","line_number":92,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L92"},"def":{"name":"add_part","args":[{"name":"path_part","external_name":"path_part","restriction":"PathPart"}],"return_type":"Fragment(T)","visibility":"Public","body":"if path_part.glob?\n  self.glob_part || (self.glob_part = Fragment(T).new(path_part: path_part))\nelse\n  if path_part.path_variable?\n    existing = self.dynamic_parts.find do |fragment|\n      fragment.path_part == path_part\n    end\n    if existing\n      return existing\n    end\n\n    fragment = Fragment(T).new(path_part: path_part)\n    self.dynamic_parts << fragment\n    fragment\n  else\n    __temp_144 = path_part.part\n    __temp_145 = static_parts\n    __temp_145[__temp_144]? || (__temp_145[__temp_144] = Fragment(T).new(path_part: path_part))\n  end\nend"},"external_var":false},{"html_id":"collect_routes:Array(Tuple(Array(PathPart),String,T))-instance-method","name":"collect_routes","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":53,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L53"},"def":{"name":"collect_routes","return_type":"Array(Tuple(Array(PathPart), String, T))","visibility":"Public","body":"routes = [] of Tuple(Array(PathPart), String, T)\nmethod_to_payload.each do |method, payload|\n  routes << {[path_part], method, payload}\nend\n\nroutes = routes + dynamic_parts.flat_map(&.collect_routes).map do |item|\n  item[0].unshift(path_part)\n  item\nend\nroutes = routes + static_parts.values.flat_map(&.collect_routes).map do |item|\n  item[0].unshift(path_part)\n  item\nend\nif gp = glob_part\n  routes = routes + gp.collect_routes.map do |item|\n    item[0].unshift(path_part)\n    item\n  end\nend\nroutes\n"},"external_var":false},{"html_id":"dynamic?:Bool-instance-method","name":"dynamic?","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":107,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L107"},"def":{"name":"dynamic?","return_type":"Bool","visibility":"Public","body":"path_part.path_variable?"},"external_var":false},{"html_id":"dynamic_parts-instance-method","name":"dynamic_parts","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":41,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L41"},"def":{"name":"dynamic_parts","visibility":"Public","body":"@dynamic_parts"},"external_var":false},{"html_id":"find(parts:Array(String),method:String):Match(T)|NoMatch-instance-method","name":"find","doc":"This looks for a matching fragment for the given parts\nand returns NoMatch if one is not found","summary":"<p>This looks for a matching fragment for the given parts and returns NoMatch if one is not found</p>","abstract":false,"args":[{"name":"parts","external_name":"parts","restriction":"Array(String)"},{"name":"method","external_name":"method","restriction":"String"}],"args_string":"(parts : Array(String), method : String) : Match(T) | NoMatch","args_html":"(parts : Array(String), method : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T) | <a href=\"../LuckyRouter/NoMatch.html\">NoMatch</a>","location":{"filename":"src/lucky_router/fragment.cr","line_number":78,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L78"},"def":{"name":"find","args":[{"name":"parts","external_name":"parts","restriction":"Array(String)"},{"name":"method","external_name":"method","restriction":"String"}],"return_type":"Match(T) | NoMatch","visibility":"Public","body":"(find_match(parts, method)) || NoMatch.new"},"external_var":false},{"html_id":"find(parts:Slice(String),method:String):Match(T)|NoMatch-instance-method","name":"find","doc":"This looks for a matching fragment for the given parts\nand returns NoMatch if one is not found","summary":"<p>This looks for a matching fragment for the given parts and returns NoMatch if one is not found</p>","abstract":false,"args":[{"name":"parts","external_name":"parts","restriction":"Slice(String)"},{"name":"method","external_name":"method","restriction":"String"}],"args_string":"(parts : Slice(String), method : String) : Match(T) | NoMatch","args_html":"(parts : Slice(String), method : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T) | <a href=\"../LuckyRouter/NoMatch.html\">NoMatch</a>","location":{"filename":"src/lucky_router/fragment.cr","line_number":83,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L83"},"def":{"name":"find","args":[{"name":"parts","external_name":"parts","restriction":"Slice(String)"},{"name":"method","external_name":"method","restriction":"String"}],"return_type":"Match(T) | NoMatch","visibility":"Public","body":"(find_match(parts, method)) || NoMatch.new"},"external_var":false},{"html_id":"find_match(path_parts:Array(String),method:String):Match(T)|Nil-instance-method","name":"find_match","abstract":false,"args":[{"name":"path_parts","external_name":"path_parts","restriction":"Array(String)"},{"name":"method","external_name":"method","restriction":"String"}],"args_string":"(path_parts : Array(String), method : String) : Match(T) | Nil","args_html":"(path_parts : Array(String), method : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T) | Nil","location":{"filename":"src/lucky_router/fragment.cr","line_number":111,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L111"},"def":{"name":"find_match","args":[{"name":"path_parts","external_name":"path_parts","restriction":"Array(String)"},{"name":"method","external_name":"method","restriction":"String"}],"return_type":"Match(T) | ::Nil","visibility":"Public","body":"find_match(path_parts, 0, method)"},"external_var":false},{"html_id":"find_match(path_parts:Slice(String),method:String):Match(T)|Nil-instance-method","name":"find_match","abstract":false,"args":[{"name":"path_parts","external_name":"path_parts","restriction":"Slice(String)"},{"name":"method","external_name":"method","restriction":"String"}],"args_string":"(path_parts : Slice(String), method : String) : Match(T) | Nil","args_html":"(path_parts : Slice(String), method : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T) | Nil","location":{"filename":"src/lucky_router/fragment.cr","line_number":115,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L115"},"def":{"name":"find_match","args":[{"name":"path_parts","external_name":"path_parts","restriction":"Slice(String)"},{"name":"method","external_name":"method","restriction":"String"}],"return_type":"Match(T) | ::Nil","visibility":"Public","body":"find_match(path_parts, 0, method)"},"external_var":false},{"html_id":"glob_part:Fragment(T)|Nil-instance-method","name":"glob_part","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":43,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L43"},"def":{"name":"glob_part","return_type":"Fragment(T) | ::Nil","visibility":"Public","body":"@glob_part"},"external_var":false},{"html_id":"glob_part=(glob_part:Fragment(T)|Nil)-instance-method","name":"glob_part=","abstract":false,"args":[{"name":"glob_part","external_name":"glob_part","restriction":"Fragment(T) | ::Nil"}],"args_string":"(glob_part : Fragment(T) | Nil)","args_html":"(glob_part : <a href=\"../LuckyRouter/Fragment.html\">Fragment</a>(T) | Nil)","location":{"filename":"src/lucky_router/fragment.cr","line_number":43,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L43"},"def":{"name":"glob_part=","args":[{"name":"glob_part","external_name":"glob_part","restriction":"Fragment(T) | ::Nil"}],"visibility":"Public","body":"@glob_part = glob_part"},"external_var":false},{"html_id":"match_for_method(method)-instance-method","name":"match_for_method","abstract":false,"args":[{"name":"method","external_name":"method","restriction":""}],"args_string":"(method)","args_html":"(method)","location":{"filename":"src/lucky_router/fragment.cr","line_number":119,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L119"},"def":{"name":"match_for_method","args":[{"name":"method","external_name":"method","restriction":""}],"visibility":"Public","body":"payload = method_to_payload[method]?\npayload ? Match(T).new(payload, Hash(String, String).new) : nil\n"},"external_var":false},{"html_id":"method_to_payload-instance-method","name":"method_to_payload","doc":"Every path can have multiple request methods\nand since each fragment represents a request path\nthe final step to finding the payload is to search for a matching request method","summary":"<p>Every path can have multiple request methods and since each fragment represents a request path the final step to finding the payload is to search for a matching request method</p>","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":47,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L47"},"def":{"name":"method_to_payload","visibility":"Public","body":"@method_to_payload"},"external_var":false},{"html_id":"path_part:PathPart-instance-method","name":"path_part","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":48,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L48"},"def":{"name":"path_part","return_type":"PathPart","visibility":"Public","body":"@path_part"},"external_var":false},{"html_id":"process_parts(parts:Array(PathPart),method:String,payload:T)-instance-method","name":"process_parts","abstract":false,"args":[{"name":"parts","external_name":"parts","restriction":"Array(PathPart)"},{"name":"method","external_name":"method","restriction":"String"},{"name":"payload","external_name":"payload","restriction":"T"}],"args_string":"(parts : Array(PathPart), method : String, payload : T)","args_html":"(parts : Array(<a href=\"../LuckyRouter/PathPart.html\">PathPart</a>), method : String, payload : T)","location":{"filename":"src/lucky_router/fragment.cr","line_number":87,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L87"},"def":{"name":"process_parts","args":[{"name":"parts","external_name":"parts","restriction":"Array(PathPart)"},{"name":"method","external_name":"method","restriction":"String"},{"name":"payload","external_name":"payload","restriction":"T"}],"visibility":"Public","body":"leaf_fragment = parts.reduce(self) do |fragment, part|\n  fragment.add_part(part)\nend\nleaf_fragment.method_to_payload[method] = payload\n"},"external_var":false},{"html_id":"static_parts-instance-method","name":"static_parts","abstract":false,"location":{"filename":"src/lucky_router/fragment.cr","line_number":42,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/fragment.cr#L42"},"def":{"name":"static_parts","visibility":"Public","body":"@static_parts"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/InvalidGlobError","path":"LuckyRouter/InvalidGlobError.html","kind":"class","full_name":"LuckyRouter::InvalidGlobError","name":"InvalidGlobError","abstract":false,"superclass":{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},"ancestors":[{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},{"html_id":"lucky_router/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/errors.cr","line_number":8,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L8"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"constructors":[{"html_id":"new(glob)-class-method","name":"new","abstract":false,"args":[{"name":"glob","external_name":"glob","restriction":""}],"args_string":"(glob)","args_html":"(glob)","location":{"filename":"src/lucky_router/errors.cr","line_number":9,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L9"},"def":{"name":"new","args":[{"name":"glob","external_name":"glob","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(glob)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/InvalidPathError","path":"LuckyRouter/InvalidPathError.html","kind":"class","full_name":"LuckyRouter::InvalidPathError","name":"InvalidPathError","abstract":false,"superclass":{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},"ancestors":[{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError"},{"html_id":"lucky_router/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/errors.cr","line_number":5,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L5"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"}},{"html_id":"lucky_router/LuckyRouter/LuckyRouterError","path":"LuckyRouter/LuckyRouterError.html","kind":"class","full_name":"LuckyRouter::LuckyRouterError","name":"LuckyRouterError","abstract":true,"superclass":{"html_id":"lucky_router/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"lucky_router/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/errors.cr","line_number":2,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/errors.cr#L2"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"lucky_router/LuckyRouter/DuplicateRouteError","kind":"class","full_name":"LuckyRouter::DuplicateRouteError","name":"DuplicateRouteError"},{"html_id":"lucky_router/LuckyRouter/InvalidGlobError","kind":"class","full_name":"LuckyRouter::InvalidGlobError","name":"InvalidGlobError"},{"html_id":"lucky_router/LuckyRouter/InvalidPathError","kind":"class","full_name":"LuckyRouter::InvalidPathError","name":"InvalidPathError"}],"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"}},{"html_id":"lucky_router/LuckyRouter/Match","path":"LuckyRouter/Match.html","kind":"struct","full_name":"LuckyRouter::Match(T)","name":"Match","abstract":false,"superclass":{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"lucky_router/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/match.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/match.cr#L1"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"constructors":[{"html_id":"new(payload:T,params:Hash(String,String))-class-method","name":"new","abstract":false,"args":[{"name":"payload","external_name":"payload","restriction":"T"},{"name":"params","external_name":"params","restriction":"::Hash(::String, ::String)"}],"args_string":"(payload : T, params : Hash(String, String))","args_html":"(payload : T, params : Hash(String, String))","location":{"filename":"src/lucky_router/match.cr","line_number":5,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/match.cr#L5"},"def":{"name":"new","args":[{"name":"payload","external_name":"payload","restriction":"T"},{"name":"params","external_name":"params","restriction":"::Hash(::String, ::String)"}],"visibility":"Public","body":"_ = Match(T).allocate\n_.initialize(payload, params)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"params:Hash(String,String)-instance-method","name":"params","abstract":false,"location":{"filename":"src/lucky_router/match.cr","line_number":3,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/match.cr#L3"},"def":{"name":"params","return_type":"Hash(String, String)","visibility":"Public","body":"@params"},"external_var":false},{"html_id":"payload:T-instance-method","name":"payload","abstract":false,"location":{"filename":"src/lucky_router/match.cr","line_number":2,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/match.cr#L2"},"def":{"name":"payload","return_type":"T","visibility":"Public","body":"@payload"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/Matcher","path":"LuckyRouter/Matcher.html","kind":"class","full_name":"LuckyRouter::Matcher(T)","name":"Matcher","abstract":false,"superclass":{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/matcher.cr","line_number":18,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L18"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"doc":"Add routes and match routes\n\n'T' is the type of the 'payload'. The 'payload' is what will be returned\nif the route matches.\n\n## Example\n\n```\n# 'T' will be 'Symbol'\nrouter = LuckyRouter::Matcher(Symbol).new\n\n# Tell the router what payload to return if matched\nrouter.add(\"get\", \"/users\", :index)\n\n# This will return :index\nrouter.match(\"get\", \"/users\").payload # :index\n```","summary":"<p>Add routes and match routes</p>","instance_methods":[{"html_id":"add(method:String,path:String,payload:T)-instance-method","name":"add","abstract":false,"args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path","external_name":"path","restriction":"String"},{"name":"payload","external_name":"payload","restriction":"T"}],"args_string":"(method : String, path : String, payload : T)","args_html":"(method : String, path : String, payload : T)","location":{"filename":"src/lucky_router/matcher.cr","line_number":23,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L23"},"def":{"name":"add","args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path","external_name":"path","restriction":"String"},{"name":"payload","external_name":"payload","restriction":"T"}],"visibility":"Public","body":"all_path_parts = PathPart.split_path(path)\nvalidate!(path, all_path_parts)\noptional_parts = all_path_parts.select(&.optional?)\nglob_part = nil\nif last_part = all_path_parts.last?\n  if last_part.glob?\n    glob_part = all_path_parts.pop\n  end\nend\n\npath_without_optional_params = all_path_parts.reject(&.optional?)\n\nprocess_and_add_path(method, path_without_optional_params, payload, path)\noptional_parts.each do |optional_part|\n  path_without_optional_params << optional_part\n  process_and_add_path(method, path_without_optional_params, payload, path)\nend\nif glob_part\n  path_without_optional_params << glob_part\n  process_and_add_path(method, path_without_optional_params, payload, path)\nend\n"},"external_var":false},{"html_id":"list_routes:Array(Tuple(String,String,T))-instance-method","name":"list_routes","doc":"Array of the path, method, and payload","summary":"<p>Array of the path, method, and payload</p>","abstract":false,"location":{"filename":"src/lucky_router/matcher.cr","line_number":46,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L46"},"def":{"name":"list_routes","return_type":"Array(Tuple(String, String, T))","visibility":"Public","body":"root.collect_routes.map do |__temp_146|\n  path_parts, method, payload = __temp_146\n  path = \"/\" + (path_parts.reject() do |__arg2|\n    __arg2.part.presence.nil?\n  end.map(&.part).join(\"/\"))\n  Tuple.new(path, method, payload)\nend"},"external_var":false},{"html_id":"match(method:String,path_to_match:String):Match(T)|Nil-instance-method","name":"match","abstract":false,"args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path_to_match","external_name":"path_to_match","restriction":"String"}],"args_string":"(method : String, path_to_match : String) : Match(T) | Nil","args_html":"(method : String, path_to_match : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T) | Nil","location":{"filename":"src/lucky_router/matcher.cr","line_number":75,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L75"},"def":{"name":"match","args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path_to_match","external_name":"path_to_match","restriction":"String"}],"return_type":"Match(T) | ::Nil","visibility":"Public","body":"parts_static_array = StaticArray(String, 16).new(\"\")\n\n\n\nparts_array = nil\n\nindex = 0\n(LuckerRouter::PathReader.new(path_to_match)).each do |part|\n  if index == parts_static_array.size\n    parts_array = Array(String).new(32)\n    parts_array.concat(parts_static_array)\n    parts_array << part\n  else\n    if parts_array\n      parts_array << part\n    else\n      parts_static_array[index] = part\n    end\n  end\n  index = index + 1\nend\n\nmatch = if parts_array\n  root.find(parts_array, method)\nelse\n  root.find(parts_static_array.to_slice[0...index], method)\nend\n\nif match.is_a?(Match)\n  match\nend\n"},"external_var":false},{"html_id":"match!(method:String,path_to_match:String):Match(T)-instance-method","name":"match!","abstract":false,"args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path_to_match","external_name":"path_to_match","restriction":"String"}],"args_string":"(method : String, path_to_match : String) : Match(T)","args_html":"(method : String, path_to_match : String) : <a href=\"../LuckyRouter/Match.html\">Match</a>(T)","location":{"filename":"src/lucky_router/matcher.cr","line_number":114,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L114"},"def":{"name":"match!","args":[{"name":"method","external_name":"method","restriction":"String"},{"name":"path_to_match","external_name":"path_to_match","restriction":"String"}],"return_type":"Match(T)","visibility":"Public","body":"(match(method, path_to_match)) || (raise(\"No matching route found for: #{path_to_match}\"))"},"external_var":false},{"html_id":"normalized_paths-instance-method","name":"normalized_paths","abstract":false,"location":{"filename":"src/lucky_router/matcher.cr","line_number":21,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L21"},"def":{"name":"normalized_paths","visibility":"Public","body":"@normalized_paths"},"external_var":false},{"html_id":"root-instance-method","name":"root","doc":"starting point from which all fragments are located","summary":"<p>starting point from which all fragments are located</p>","abstract":false,"location":{"filename":"src/lucky_router/matcher.cr","line_number":20,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/matcher.cr#L20"},"def":{"name":"root","visibility":"Public","body":"@root"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/NoMatch","path":"LuckyRouter/NoMatch.html","kind":"struct","full_name":"LuckyRouter::NoMatch","name":"NoMatch","abstract":false,"superclass":{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"lucky_router/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/no_match.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/no_match.cr#L1"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/lucky_router/no_match.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/no_match.cr#L1"},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"},"external_var":false}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/lucky_router/no_match.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/no_match.cr#L1"},"def":{"name":"initialize","visibility":"Public","body":""},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/PathNormalizer","path":"LuckyRouter/PathNormalizer.html","kind":"class","full_name":"LuckyRouter::PathNormalizer","name":"PathNormalizer","abstract":false,"superclass":{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"lucky_router/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/path_normalizer.cr","line_number":1,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_normalizer.cr#L1"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEFAULT_PATH_VARIABLE_NAME","name":"DEFAULT_PATH_VARIABLE_NAME","value":"\":path_variable\""}],"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"class_methods":[{"html_id":"normalize(path_parts:Array(PathPart)):String-class-method","name":"normalize","abstract":false,"args":[{"name":"path_parts","external_name":"path_parts","restriction":"Array(PathPart)"}],"args_string":"(path_parts : Array(PathPart)) : String","args_html":"(path_parts : Array(<a href=\"../LuckyRouter/PathPart.html\">PathPart</a>)) : String","location":{"filename":"src/lucky_router/path_normalizer.cr","line_number":4,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_normalizer.cr#L4"},"def":{"name":"normalize","args":[{"name":"path_parts","external_name":"path_parts","restriction":"Array(PathPart)"}],"return_type":"String","visibility":"Public","body":"path_parts.map do |path_part|\n  normalize(path_part)\nend.join('/')"},"external_var":false}]},{"html_id":"lucky_router/LuckyRouter/PathPart","path":"LuckyRouter/PathPart.html","kind":"struct","full_name":"LuckyRouter::PathPart","name":"PathPart","abstract":false,"superclass":{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"lucky_router/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"lucky_router/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"lucky_router/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lucky_router/path_part.cr","line_number":29,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L29"}],"repository_name":"lucky_router","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"lucky_router/LuckyRouter","kind":"module","full_name":"LuckyRouter","name":"LuckyRouter"},"doc":"A PathPart represents a single section of a path\n\nIt can be a static path\n\n```\npath_part = PathPart.new(\"users\")\npath_part.path_variable? => false\npath_part.optional? => false\npath_part.name => \"users\"\n```\n\nIt can be a path variable\n\n```\npath_part = PathPart.new(\":id\")\npath_part.path_variable? => true\npath_part.optional? => false\npath_part.name => \"id\"\n```\n\nIt can be optional\n\n```\npath_part = PathPart.new(\"?users\")\npath_part.path_variable? => false\npath_part.optional? => true\npath_part.name => \"users\"\n```","summary":"<p>A PathPart represents a single section of a path</p>","class_methods":[{"html_id":"split_path(path:String):Array(PathPart)-class-method","name":"split_path","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"String"}],"args_string":"(path : String) : Array(PathPart)","args_html":"(path : String) : Array(<a href=\"../LuckyRouter/PathPart.html\">PathPart</a>)","location":{"filename":"src/lucky_router/path_part.cr","line_number":30,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L30"},"def":{"name":"split_path","args":[{"name":"path","external_name":"path","restriction":"String"}],"return_type":"Array(PathPart)","visibility":"Public","body":"parts = LuckerRouter::PathReader.new(path)\nparts.map do |part|\n  new(part)\nend.to_a\n"},"external_var":false}],"constructors":[{"html_id":"new(part:String)-class-method","name":"new","abstract":false,"args":[{"name":"part","external_name":"part","restriction":"::String"}],"args_string":"(part : String)","args_html":"(part : String)","location":{"filename":"src/lucky_router/path_part.cr","line_number":37,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L37"},"def":{"name":"new","args":[{"name":"part","external_name":"part","restriction":"::String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(part)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"},"external_var":false}],"instance_methods":[{"html_id":"glob?:Bool-instance-method","name":"glob?","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":53,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L53"},"def":{"name":"glob?","return_type":"Bool","visibility":"Public","body":"part.starts_with?('*')"},"external_var":false},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":40,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L40"},"def":{"name":"name","return_type":"String","visibility":"Public","body":"name = ((part.lchop('?')).lchop('*')).lchop(':')\nunnamed_glob?(name) ? \"glob\" : name\n"},"external_var":false},{"html_id":"optional?:Bool-instance-method","name":"optional?","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":45,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L45"},"def":{"name":"optional?","return_type":"Bool","visibility":"Public","body":"part.starts_with?('?')"},"external_var":false},{"html_id":"part:String-instance-method","name":"part","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":35,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L35"},"def":{"name":"part","return_type":"String","visibility":"Public","body":"@part"},"external_var":false},{"html_id":"path_variable?:Bool-instance-method","name":"path_variable?","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":49,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L49"},"def":{"name":"path_variable?","return_type":"Bool","visibility":"Public","body":"((part.starts_with?(':')) || (part.starts_with?(\"?:\"))) || glob?"},"external_var":false},{"html_id":"validate!-instance-method","name":"validate!","abstract":false,"location":{"filename":"src/lucky_router/path_part.cr","line_number":57,"url":"https://github.com/luckyframework/lucky_router/blob/670df15727fc0a7b0ac8749dc0be75b59b8f174b/src/lucky_router/path_part.cr#L57"},"def":{"name":"validate!","visibility":"Public","body":"if invalid_glob?\n  raise(InvalidGlobError.new(part))\nend"},"external_var":false}]}]}]}})